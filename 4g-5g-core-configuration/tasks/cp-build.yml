---
# tasks file for build

- name: change to build directory & build 4G
  ansible.builtin.shell:
    chdir: "{{ default_build_dir }}"
    cmd: git checkout zitel_main && bash build_without_dpdk.sh > build_output.txt
  ignore_errors: false
  when:
    - build_core == "true"
    - is_4g == "true"


- name: change to build directory & build 5G
  ansible.builtin.shell:
    chdir: "{{ default_build_dir }}"
    cmd: git checkout neon_core && bash build_with_dpdk.sh > build_output.txt
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ http_proxy }}"
  ignore_errors: false
  when:
    - build_core == "true"
    - is_4g == "false"


- name: Gather facts about services
  ansible.builtin.service_facts:

- name: Ensure services are stopped
  ansible.builtin.systemd:
    state: stopped
    name: "{{ item }}"
  with_items: "{{ ansible_facts.services.keys() | select('match', '^zcore.*') | list }}"
  when: copy_binaries_after_build == "true"

- name: Ensure services are stopped
  ansible.builtin.systemd:
    state: stopped
    name: "{{ item }}"
  with_items: "{{ ansible_facts.services.keys() | select('match', '^neon.*') | list }}"
  when: copy_binaries_after_build == "true"


- name: Get current timestamp
  set_fact:
    timestamp: "{{ ansible_date_time.date }}-{{ ansible_date_time.hour }}-{{ ansible_date_time.minute }}"
  when: backup_old_binaries == "true"

- name: Create backup directory
  ansible.builtin.file:
    path: "{{ default_binaries_backup_dir }}-{{ timestamp }}"
    state: directory
    mode: '0755'
  when: backup_old_binaries == "true"
  register: binaries_backup_dir

- name: Backup 4G binaries
  ansible.builtin.find:
    paths: "{{ default_binaries_dir }}"
    file_type: file
    patterns: "^zcore.*"
    use_regex: yes
  register: files_to_copy
  when:
    - backup_old_binaries == "true"
    - is_4g == "true"

- name: Backup 5G binaries
  ansible.builtin.find:
    paths: "{{ default_binaries_dir }}"
    file_type: file
    patterns: "^neon.*"
    use_regex: yes
  register: files_to_copy
  when:
    - backup_old_binaries == "true"
    - is_4g == "false"

- name: Copy binaries to backup directory
  ansible.builtin.copy:
    src: "{{ item.path }}"
    dest: "{{ binaries_backup_dir.path }}/{{ item.path | basename }}"
    remote_src: true
  with_items: "{{ files_to_copy.files }}"
  when: backup_old_binaries == "true"

- name: Copy new binaries to path /usr/bin
  ansible.builtin.copy:
    src: "{{ default_build_dir }}/install/bin/"
    dest: "{{ default_binaries_dir }}"
    remote_src: true

  when: copy_binaries_after_build == "true"

- name: Create 4G configs directory
  ansible.builtin.file:
    path: "{{ default_core_configs_dir }}"
    state: directory
    mode: '0755'
  when:
    - create_and_copy_config_files == "true"
    - is_4g == "true"

- name: Create 5G configs directory
  ansible.builtin.file:
    path: "{{ default_core_configs_dir_5g }}"
    state: directory
    mode: '0755'
  when:
    - create_and_copy_config_files == "true"
    - is_4g == "false"

- name: Create TLS directory
  ansible.builtin.file:
    path: "{{ default_core_configs_dir_5g }}/tls"
    state: directory
    mode: '0755'
  when:
    - create_and_copy_config_files == "true"

- name: Create 5G log directories
  ansible.builtin.file:
    path: "{{ default_core_log_dir_5g }}"
    state: directory
    mode: '0755'
  when:
    - create_and_copy_config_files == "true"

- name: Copy libraries to /lib/x86_64-linux-gnu
  ansible.builtin.copy:
    src: "{{ default_build_dir }}/install/lib/x86_64-linux-gnu/"
    dest: /lib/x86_64-linux-gnu
    remote_src: true
  ignore_errors: false
  when: create_and_copy_config_files == "true"

- name: Copy freediameter files to /etc/freeDiameter
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ default_freediameter_dir }}/{{ item | basename | regex_replace('\\.j2$', '') }}"
    owner: root
    group: root
    mode: '0644'
  with_fileglob:
    - "{{ freediameter_files_dir }}/*.j2"
  ignore_errors: false
  when:
    - create_and_copy_config_files == "true"
    - is_4g == "true"

- name: Create /etc/recovery_counter.txt
  ansible.builtin.file:
    path: /etc/recovery_counter.txt
    state: touch
    mode: '0644'
  ignore_errors: false
  when:
    - create_and_copy_config_files == "true"
    - is_4g == "true"

- name: Copy 4G YAML files to its directory
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ default_core_configs_dir }}/{{ item | basename | regex_replace('\\.j2$', '') }}"
    owner: root
    group: root
    mode: '0644'
  with_fileglob:
    - "{{ yaml_files_dir_4g }}/*.yaml.j2"
  when:
    - create_and_copy_config_files == "true"
    - is_4g == "true"

- name: Copy 5G YAML files to its directory
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ default_core_configs_dir_5g }}/{{ item | basename | regex_replace('\\.j2$', '') }}"
    owner: root
    group: root
    mode: '0644'
  with_fileglob:
    - "{{ yaml_files_dir_5g }}/*.yaml.j2"
  when:
    - create_and_copy_config_files == "true"
    - is_4g == "false"

- name: Copy TLS keys
  ansible.builtin.copy:
    src: "{{ default_build_dir }}/install/etc/open5gs/tls/"
    dest: "{{ default_core_configs_dir_5g }}/tls"
    remote_src: true
  when:
    - create_and_copy_config_files == "true"
    - is_4g == "false"
